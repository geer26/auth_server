#PARAMS AMONGST ! ! ARE OPTIONAL

### Add superuser
# Works only if there is no superuser!
# Endpoint: /API/addsu
# Method: POST
# Type: application/json
# JSON payload: {'username': <str>, 'password': <str>}
# Returns: 200 or 400 with message
#POST http://127.0.0.1:5001/API/addsu HTTP/1.1
POST https://kecskecsecse.tk/API/addsu HTTP/1.1
content-type: application/json

{
    "username": "superuser",
    "password": "123456aA"
}


### Login
# Endpoint: /API/login
# Method: POST
# Type: application/json
# JSON payload: {'username': <str>, 'password': <str>, !'remember': <boolean>!}
# Returns: 200 or 400 with message
#POST http://127.0.0.1:5001/API/login HTTP/1.1
POST https://kecskecsecse.tk/API/login HTTP/1.1
content-type: application/json

{
    "username": "superuser",
    "password": "123456aA",
    "remember": false
}


### Add user
# Endpoint: /API/adduser
# Method: POST
# Type: application/json
# JSON payload: {"username": <str>, "password": <str>, "email": <str>, "is_enabled": <boolean>, "is_superuser": <boolean>}
# Returns: 200, 401 or 500 with message
POST http://127.0.0.1:5001/API/adduser HTTP/1.1
content-type: application/json

{
    "username": "su2",
    "password": "123456aA",
    "email": "noa@gmail.com",
    "is_enabled": true,
    "is_superuser": true
}


### Delete user
# Deletes recursively user's testbatteries also!
# Endpoint: /API/deluser
# Method: POST
# Type: application/json
# JSON payload: {"uid": <int>}
# Returns: 200, 401 or 500 with message
POST http://127.0.0.1:5001/API/deluser HTTP/1.1
content-type: application/json

{
    "uid": 8
}


### Update user
# Updates only data with NO database integrity issues
# Endpoint: /API/updateuser
# Method: POST
# Type: application/json
# JSON payload: {!"email": <str>!, !"settings": <JSON>!, !"is_superuser": <boolean>!, !"is_enabled": <boolean>!}
# Returns: 200, 401 or 500 with message
POST http://127.0.0.1:5001/API/deluser HTTP/1.1
content-type: application/json

{
    "email": "new@mail.com",
    "settings": {"new": "setting"},
    "is_superuser": true,
    "is_enabled": false
}


### Add testbattery
# Endpoint: /API/addbattery
# Method: POST
# Type: application/json
# JSON payload: {"short name": <str>, "name": <str>, "description": <str>, "user_id": <int>}
# Returns: 200, 401 or 500 with message
POST http://127.0.0.1:5001/API/addbattery HTTP/1.1
Content-Type: application/json

{
    "short_name": "proba-battery",
    "name": "Tesztcsomag, alapvető funkciók tesztelésére",
    "description": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.",
    "user_id": 7
}


### Delete testbattery
# Deletes recursively testbattery's surveys also!
# Endpoint: /API/delbattery
# Method: POST
# Type: application/json
# JSON payload: {"tbid": <int>}
# Returns: 200, 401 or 500 with message
POST http://127.0.0.1:5001/API/delbattery HTTP/1.1
content-type: application/json

{
    "tbid": 8
}


### Update testbattery
# Updates only data with NO database integrity issues
# Endpoint: /API/updatebattery
# Method: POST
# Type: application/json
# JSON payload: {"tbid": <int>, !"name": <JSON>!, !"description": <str>!, !"requirements": <JSON>!, !"est_time": <str>!}
# Returns: 200, 401 or 500 with message
POST http://127.0.0.1:5001/API/updatebattery HTTP/1.1
content-type: application/json

{
    "tbid": 8,
    "name": "Új név",
    "description": "Új leírás",
    "requirements": {"new": "új követelmény"},
    "est_time": "Új becsült idő"
}


### 5. Add survey
# On anonymus survey it creates a result and a token entry also!
# Endpoint: /API/addsurvey
# Method: POST
# Type: application/json
# JSON payload: {"tbid": <int>, "title": <str>, "email_body": <str>, "is_anonymus": <boolean>, "is_active": <boolean>, "is_archived": <boolean>}
# Returns: 200, 401 or 500 with message
POST http://127.0.0.1:5001/API/addsurvey HTTP/1.1
content-type: application/json

{
    "title": "Egy nevesített felmérés",
    "is_anonymus": false,
    "is_active": true,
    "is_archived": false,
    "email_body": "A köremail szövege",
    "tbid": 9
}


### Delete survey
# Deletes recursively survey's clients, and all relevant tokens and results also!
# Endpoint: /API/delsurvey
# Method: POST
# Type: application/json
# JSON payload: {"sid": <int>}
# Returns: 200, 401 or 500 with message
POST http://127.0.0.1:5001/API/delsurvey HTTP/1.1
content-type: application/json

{
    "sid": 32
}


### Update survey
# Endpoint: /API/updatesurvey
# Method: POST
# Type: application/json
# JSON payload: {"sid": <int>, !"title": <str>!, !"description": <str>!, !"is_archived": <boolean>!, !is_archived: <boolean>!, !"email_body": <str>!}
# Returns: 200, 401 or 500 with message
POST http://127.0.0.1:5001/API/updatesurvey HTTP/1.1
content-type: application/json

{
    "sid": 31,
    "title": "Új névtelen felmérés",
    "description": "Új leírás",
    "is_active": true,
    "is_archived": false,
    "email_body": "Új üzenettörzs"
}



### Add client
# Creates a result and a token entry for the client
# Endpoint: /API/addclient
# Method: POST
# Type: application/json
# JSON payload: {"name": <str>, "email": <str>, "is_archived": <boolean>, "survey_is": <int>}
# Returns: 200, 401 or 500 with message
POST http://127.0.0.1:5001/API/addclient HTTP/1.1
content-type: application/json

{
    "name": "Aladár",
    "email": "aladar@email.com",
    "is_archived": false,
    "survey_id": 33
}


### Delete client
# Deletes the corresponding result and token for the client
# Endpoint: /API/delclient
# Method: POST
# Type: application/json
# JSON payload: {"cid": <int>}
# Returns: 200, 401 or 500 with message
POST http://127.0.0.1:5001/API/delclient HTTP/1.1
content-type: application/json

{
    "cid": 3
}


### Update client
# Updates the client data, keeps database coherency
# Endpoint: /API/updateclient
# Method: POST
# Type: application/json
# JSON payload: {"cid": <int>, !"name": <str>!, !"email": <str>!, !"is_archived": <boolean>!}
# Returns: 200, 401 or 500 with message
POST http://127.0.0.1:5001/API/updateclient HTTP/1.1
content-type: application/json

{
    "cid": 10,
    "name": "Aladár",
    "email": "aladar@mail.com",
    "is_archived": false
}


### Get relevant data
# Gets all data relevant to logged in user!
# Endpoint: /API/admindata
# Method: GET
# Returns: 200, 401 or 500 with message
#GET http://127.0.0.1:5001/API/admindata HTTP/1.1
GET https://kecskecsecse.tk/API/admindata HTTP/1.1


### Wipe database
# Wipes database except superusers
# Endpoint: /API/wipedatabase
# Method: GET
# Returns: 200, 401 or 500 with message
GET http://127.0.0.1:5001/API/wipedatabase HTTP/1.1



### Logout user
# logs out current user
# Endpoint: /API/logout
# Method: GET
# Returns: 200, 400 with message
GET http://127.0.0.1:5001/API/logout HTTP/1.1


### Healthcheck
# provides useful information - UNDER CONSTRUCTION!
# Endpoint: /API/healthcheck
#GET http://127.0.0.1:5001/healthcheck HTTP/1.1
GET https://kecskecsecse.tk/healthcheck HTTP/1.1


### Read current log
# Method: GET
# Returns: 200 and content of the current log, OR 401 or 500
#GET http://127.0.0.1:5001/API/readlog HTTP/1.1
GET https://kecskecsecse.tk/API/readlog HTTP/1.1


### Download log archive - UNDER CONSTRUCTION!
# Do not includes the current logfile!
# Method: GET
# Returns: 200 and the zipfile, OR 401 or 500
GET http://127.0.0.1:5001/API/downloadlog HTTP/1.1


### General Authenticate endpoint
# If no logged in due the params, returns false!
# Endpoint: /API/auth
# Method: GET
# Param: role : admin/user/client
# Returns: true, 200 or false, 401, 400, 500
GET http://127.0.0.1:5001/API/auth?role=client


### Login client
# Logs in client
# Endpoint: /API/clientlogin
# Method: POST
# Type: application/json
# JSON payload: {"token": <token>}
# Returns: 200, 401 or 500 with message
#POST http://127.0.0.1:5001/API/clientlogin HTTP/1.1
POST https://kecskecsecse.tk/API/clientlogin HTTP/1.1
content-type: application/json

{
   "token": "e3d7f6b8-3f95-11ec-a9d8-dfc8ae3fa97c"
}


### Log from frontend
# Enables logging from frontend side
# Endpoint: /API/log
# Method: POST
# Type: application/json
# JSON payload: {"message": <str>, !"type": <int>!}
# Returns: 200, 401 or 500 with message
POST http://127.0.0.1:5001/API/log HTTP/1.1
#POST https://kecskecsecse.tk/API/log HTTP/1.1
content-type: application/json

{
    "message": "Put this into logfile!",
    "type": 1
}